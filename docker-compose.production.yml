version: "3.8"

services:
  # Load balancer / Reverse proxy
  nginx-proxy:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ${SSL_CERT_PATH}:/etc/nginx/ssl:ro
    depends_on:
      - user-app
      - analytics-dashboard
      - backend
    networks:
      - frontend
      - backend
    restart: unless-stopped
    environment:
      - NGINX_WORKER_PROCESSES=${NGINX_WORKER_PROCESSES:-auto}
      - NGINX_WORKER_CONNECTIONS=${NGINX_WORKER_CONNECTIONS:-1024}

  # User Application
  user-app:
    image: ${DOCKER_REGISTRY_URL:-}user-journey-user-app:${IMAGE_TAG:-latest}
    build:
      context: .
      dockerfile: packages/user-app/Dockerfile
      args:
        - BUILD_NUMBER=${BUILD_NUMBER:-}
        - BUILD_DATE=${BUILD_DATE:-}
    environment:
      # Application Configuration
      - NODE_ENV=production
      - PORT=${USER_APP_PORT:-3000}
      - REACT_APP_ENVIRONMENT=production
      - REACT_APP_APP_NAME=${USER_APP_NAME:-User Application}
      - REACT_APP_VERSION=${USER_APP_VERSION:-1.0.0}

      # API Configuration
      - REACT_APP_API_BASE_URL=${API_BASE_URL}
      - REACT_APP_WEBSOCKET_URL=${WEBSOCKET_URL}

      # Firebase Configuration
      - REACT_APP_FIREBASE_API_KEY=${FIREBASE_API_KEY}
      - REACT_APP_FIREBASE_AUTH_DOMAIN=${FIREBASE_AUTH_DOMAIN}
      - REACT_APP_FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - REACT_APP_FIREBASE_STORAGE_BUCKET=${FIREBASE_STORAGE_BUCKET}
      - REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${FIREBASE_MESSAGING_SENDER_ID}
      - REACT_APP_FIREBASE_APP_ID=${FIREBASE_APP_ID}

      # Analytics Configuration
      - REACT_APP_EVENT_BATCH_SIZE=${EVENT_BATCH_SIZE:-20}
      - REACT_APP_EVENT_FLUSH_INTERVAL=${EVENT_FLUSH_INTERVAL:-3000}
      - REACT_APP_OFFLINE_QUEUE_SIZE=${OFFLINE_QUEUE_SIZE:-200}
      - REACT_APP_ANALYTICS_ENABLED=${ANALYTICS_ENABLED:-true}
      - REACT_APP_DEBUG_MODE=${DEBUG_MODE:-false}

      # Feature Flags
      - REACT_APP_ENABLE_VIDEO_LIBRARY=${ENABLE_VIDEO_LIBRARY:-true}
      - REACT_APP_ENABLE_CALCULATOR=${ENABLE_CALCULATOR:-true}
      - REACT_APP_ENABLE_DOCUMENT_UPLOAD=${ENABLE_DOCUMENT_UPLOAD:-true}
      - REACT_APP_ENABLE_PERSONA_SWITCHER=${ENABLE_PERSONA_SWITCHER:-true}
    networks:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Analytics Dashboard
  analytics-dashboard:
    image: ${DOCKER_REGISTRY_URL:-}user-journey-analytics-dashboard:${IMAGE_TAG:-latest}
    build:
      context: .
      dockerfile: packages/analytics-dashboard/Dockerfile
      args:
        - BUILD_NUMBER=${BUILD_NUMBER:-}
        - BUILD_DATE=${BUILD_DATE:-}
    environment:
      # Application Configuration
      - NODE_ENV=production
      - PORT=${ANALYTICS_DASHBOARD_PORT:-3001}
      - REACT_APP_ENVIRONMENT=production
      - REACT_APP_APP_NAME=${ANALYTICS_APP_NAME:-Analytics Dashboard}
      - REACT_APP_VERSION=${ANALYTICS_APP_VERSION:-1.0.0}
      - REACT_APP_APP_TYPE=analytics

      # API Configuration
      - REACT_APP_API_BASE_URL=${API_BASE_URL}
      - REACT_APP_ANALYTICS_API_BASE_URL=${ANALYTICS_API_BASE_URL}
      - REACT_APP_WEBSOCKET_URL=${ANALYTICS_WEBSOCKET_URL}
      - REACT_APP_REALTIME_ENDPOINT=${ANALYTICS_REALTIME_ENDPOINT}

      # Authentication Configuration
      - REACT_APP_AUTH_PROVIDER=jwt
      - REACT_APP_AUTH_ENDPOINT=${ANALYTICS_AUTH_ENDPOINT}
      - REACT_APP_TOKEN_REFRESH_INTERVAL=${TOKEN_REFRESH_INTERVAL:-3600000}
      - REACT_APP_SESSION_TIMEOUT=${SESSION_TIMEOUT:-7200000}

      # Analytics Configuration
      - REACT_APP_ANALYTICS_REFRESH_INTERVAL=${ANALYTICS_REFRESH_INTERVAL:-60000}
      - REACT_APP_EXPORT_MAX_RECORDS=${EXPORT_MAX_RECORDS:-50000}
      - REACT_APP_CHART_ANIMATION_DURATION=${CHART_ANIMATION_DURATION:-200}
      - REACT_APP_DATA_RETENTION_DAYS=${DATA_RETENTION_DAYS:-365}
      - REACT_APP_MAX_CONCURRENT_EXPORTS=${MAX_CONCURRENT_EXPORTS:-5}
      - REACT_APP_REALTIME_BUFFER_SIZE=${REALTIME_BUFFER_SIZE:-2000}

      # Feature Flags
      - REACT_APP_ENABLE_AMAZON_Q=${ENABLE_AMAZON_Q:-true}
      - REACT_APP_ENABLE_EXPORT=${ENABLE_EXPORT:-true}
      - REACT_APP_ENABLE_REALTIME=${ENABLE_REALTIME:-true}
      - REACT_APP_ENABLE_ADVANCED_FILTERS=${ENABLE_ADVANCED_FILTERS:-true}
      - REACT_APP_ENABLE_USER_SEGMENTATION=${ENABLE_USER_SEGMENTATION:-true}

      # Performance Configuration
      - REACT_APP_PAGINATION_SIZE=${PAGINATION_SIZE:-100}
      - REACT_APP_CHART_MAX_DATA_POINTS=${CHART_MAX_DATA_POINTS:-2000}
      - REACT_APP_DEBOUNCE_DELAY=${DEBOUNCE_DELAY:-200}
    networks:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Backend API
  backend:
    image: ${DOCKER_REGISTRY_URL:-}user-journey-backend:${IMAGE_TAG:-latest}
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - BUILD_NUMBER=${BUILD_NUMBER:-}
        - BUILD_DATE=${BUILD_DATE:-}
    environment:
      # Spring Configuration
      - SPRING_PROFILES_ACTIVE=production
      - SERVER_PORT=${BACKEND_PORT:-8080}

      # AWS Configuration
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}

      # DynamoDB Configuration
      - DYNAMODB_TABLE_PREFIX=${DYNAMODB_TABLE_PREFIX:-prod-}
      - DYNAMODB_READ_CAPACITY=${DYNAMODB_READ_CAPACITY:-10}
      - DYNAMODB_WRITE_CAPACITY=${DYNAMODB_WRITE_CAPACITY:-10}

      # Kinesis Configuration
      - KINESIS_STREAM_NAME=${KINESIS_STREAM_NAME}
      - KINESIS_SHARD_COUNT=${KINESIS_SHARD_COUNT:-2}

      # S3 Configuration
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}

      # SQS Configuration
      - AWS_SQS_DLQ_URL=${AWS_SQS_DLQ_URL}
      - AWS_SQS_RETRY_QUEUE_URL=${AWS_SQS_RETRY_QUEUE_URL}

      # Bedrock Configuration
      - BEDROCK_AGENT_ID=${BEDROCK_AGENT_ID}
      - BEDROCK_AGENT_ALIAS_ID=${BEDROCK_AGENT_ALIAS_ID}

      # Nova Configuration
      - NOVA_MODEL_ID=${NOVA_MODEL_ID:-amazon.nova-micro-v1:0}
      - NOVA_MAX_TOKENS=${NOVA_MAX_TOKENS:-1000}
      - NOVA_TEMPERATURE=${NOVA_TEMPERATURE:-0.3}
      - NOVA_TIMEOUT_SECONDS=${NOVA_TIMEOUT_SECONDS:-30}

      # SageMaker Configuration
      - SAGEMAKER_EXIT_RISK_ENDPOINT=${SAGEMAKER_EXIT_RISK_ENDPOINT}
      - SAGEMAKER_MODEL_THRESHOLD=${SAGEMAKER_MODEL_THRESHOLD:-0.5}

      # Firebase Configuration
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_CREDENTIALS_PATH=${FIREBASE_CREDENTIALS_PATH:-classpath:firebase-service-account-prod.json}

      # Security Configuration
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-3600}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}

      # Redis Configuration
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}

      # Rate Limiting Configuration
      - RATE_LIMIT_RPM=${RATE_LIMIT_RPM:-1000}
      - RATE_LIMIT_BURST=${RATE_LIMIT_BURST:-100}

      # CORS Configuration
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}

      # Logging Configuration
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ROOT_LOG_LEVEL=${ROOT_LOG_LEVEL:-WARN}
      - LOG_FILE_PATH=${LOG_FILE_PATH:-/var/log/user-journey-analytics/application.log}

      # Resilience Configuration
      - RESILIENCE_CB_FAILURE_THRESHOLD=${RESILIENCE_CB_FAILURE_THRESHOLD:-5}
      - RESILIENCE_CB_TIMEOUT_DURATION=${RESILIENCE_CB_TIMEOUT_DURATION:-60000}
      - RESILIENCE_CB_SUCCESS_THRESHOLD=${RESILIENCE_CB_SUCCESS_THRESHOLD:-3}
      - RESILIENCE_RETRY_MAX_ATTEMPTS=${RESILIENCE_RETRY_MAX_ATTEMPTS:-3}
      - RESILIENCE_RETRY_INITIAL_DELAY=${RESILIENCE_RETRY_INITIAL_DELAY:-1000}
      - RESILIENCE_RETRY_BACKOFF_MULTIPLIER=${RESILIENCE_RETRY_BACKOFF_MULTIPLIER:-2.0}
      - RESILIENCE_RETRY_MAX_DELAY=${RESILIENCE_RETRY_MAX_DELAY:-30000}

      # DLQ Configuration
      - DLQ_PROCESSING_ENABLED=${DLQ_PROCESSING_ENABLED:-true}
      - DLQ_PROCESSING_INTERVAL=${DLQ_PROCESSING_INTERVAL:-30000}
      - DLQ_PROCESSING_BATCH_SIZE=${DLQ_PROCESSING_BATCH_SIZE:-20}
      - DLQ_MAX_RETRY_ATTEMPTS=${DLQ_MAX_RETRY_ATTEMPTS:-3}
    volumes:
      - ${LOG_FILE_PATH:-./logs}:/var/log/user-journey-analytics
      - ${FIREBASE_CREDENTIALS_PATH:-./firebase-service-account-prod.json}:/app/firebase-service-account-prod.json:ro
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

networks:
  frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  ssl_certs:
    driver: local
  redis_data:
    driver: local
  log_data:
    driver: local
