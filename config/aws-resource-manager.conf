#!/bin/bash
# AWS Resource Manager Configuration File
# This file contains configuration settings for the AWS Cost Zero Management System
# 
# Requirements: 1.1, 1.6, 10.1

# ==============================================================================
# PROJECT IDENTIFICATION
# ==============================================================================
# These settings identify which AWS resources belong to this project

# Project name - used to filter resources by tag
# All managed resources must have tag: Project=user-journey-analytics
PROJECT_NAME="user-journey-analytics"

# Environment - used to filter resources by environment tag
# Valid values: dev, staging, prod, all
# When set to "all", manages resources across all environments
ENVIRONMENT="prod"

# AWS Region where resources are deployed
AWS_REGION="us-east-1"

# ==============================================================================
# AWS CONFIGURATION
# ==============================================================================
# AWS CLI and SDK configuration settings

# AWS CLI profile to use for authentication
# Leave empty to use default profile or instance role
AWS_PROFILE=""

# AWS Account ID (optional, used for validation)
# Leave empty to auto-detect from current credentials
AWS_ACCOUNT_ID=""

# ==============================================================================
# STATE MANAGEMENT
# ==============================================================================
# Configuration for resource state persistence

# Local state file path (relative to project root)
# This file stores resource configurations before stopping
STATE_FILE="config/aws-resource-state.json"

# S3 bucket for state backup (optional)
# Leave empty to disable S3 backup
# Format: s3://bucket-name/path/to/state
STATE_BACKUP_S3_BUCKET=""

# S3 bucket key prefix for state backups
STATE_BACKUP_S3_PREFIX="aws-resource-manager/state"

# Enable state versioning (keeps history of state changes)
STATE_VERSIONING_ENABLED=true

# Number of state versions to retain
STATE_VERSION_RETENTION=10

# ==============================================================================
# RESOURCE MANAGEMENT
# ==============================================================================
# Settings for resource lifecycle management

# Resource groups to manage (comma-separated)
# Valid values: lambda, sagemaker, kinesis, dynamodb, cloudwatch, all
# Example: "lambda,kinesis" to manage only Lambda and Kinesis
RESOURCE_GROUPS="all"

# Specific resources to exclude from management (comma-separated resource names)
# Example: "critical-lambda-function,production-table"
EXCLUDED_RESOURCES=""

# Kinesis stream configuration
# Minimum shard count when stopping (1 is minimum, 0 would delete stream)
KINESIS_MIN_SHARD_COUNT=1

# DynamoDB billing mode when stopping
# Valid values: PAY_PER_REQUEST, PROVISIONED
DYNAMODB_STOP_BILLING_MODE="PAY_PER_REQUEST"

# Lambda concurrency limit when stopping (0 prevents all invocations)
LAMBDA_STOP_CONCURRENCY=0

# CloudWatch alarm action when stopping
# Valid values: disable, delete
CLOUDWATCH_ALARM_ACTION="disable"

# ==============================================================================
# BEHAVIOR SETTINGS
# ==============================================================================
# Control script behavior and user interaction

# Require confirmation before executing stop/start operations
# Set to false to skip confirmation prompts (use with caution!)
REQUIRE_CONFIRMATION=true

# Default to dry-run mode (preview changes without executing)
# Set to true to always run in dry-run mode unless --force is specified
DRY_RUN_DEFAULT=false

# Enable parallel operations for faster execution
# Set to false to execute operations sequentially
PARALLEL_OPERATIONS=true

# Maximum number of parallel workers
# Recommended: 5-10 to avoid AWS API rate limits
MAX_WORKERS=10

# Timeout for individual resource operations (seconds)
OPERATION_TIMEOUT=300

# Retry configuration for AWS API calls
MAX_RETRIES=3
RETRY_DELAY=2

# ==============================================================================
# COST MANAGEMENT
# ==============================================================================
# Cost estimation and threshold settings

# Enable cost estimation and reporting
COST_ESTIMATION_ENABLED=true

# AWS Cost Explorer API enabled (requires additional permissions)
# Set to false to use estimated costs only
COST_EXPLORER_ENABLED=false

# Cost threshold for warnings (USD per month)
# Set to 0 to disable threshold warnings
COST_THRESHOLD_WARNING=50

# Cost threshold for critical alerts (USD per month)
# Set to 0 to disable critical alerts
COST_THRESHOLD_CRITICAL=100

# Automatically stop resources when critical threshold is exceeded
# Use with extreme caution in production!
AUTO_STOP_ON_THRESHOLD=false

# ==============================================================================
# NOTIFICATIONS
# ==============================================================================
# SNS notification configuration

# SNS topic ARN for operation notifications (optional)
# Leave empty to disable SNS notifications
# Format: arn:aws:sns:region:account-id:topic-name
SNS_TOPIC_ARN=""

# Send notification on successful operations
NOTIFY_ON_SUCCESS=true

# Send notification on operation failures
NOTIFY_ON_FAILURE=true

# Send notification on cost threshold breaches
NOTIFY_ON_COST_THRESHOLD=true

# Email addresses for notifications (comma-separated, optional)
# Used if SNS topic is not configured
NOTIFICATION_EMAILS=""

# ==============================================================================
# LOGGING
# ==============================================================================
# Logging and audit trail configuration

# Log file path (relative to project root)
LOG_FILE="logs/aws-resource-manager.log"

# Log level for file output
# Valid values: DEBUG, INFO, WARNING, ERROR
LOG_LEVEL_FILE="DEBUG"

# Log level for console output
# Valid values: DEBUG, INFO, WARNING, ERROR
LOG_LEVEL_CONSOLE="INFO"

# Enable operation audit trail
# Saves detailed operation reports to logs/operations/
AUDIT_TRAIL_ENABLED=true

# Audit trail retention period (days)
AUDIT_TRAIL_RETENTION_DAYS=90

# Log rotation settings
LOG_MAX_SIZE_MB=100
LOG_BACKUP_COUNT=5

# ==============================================================================
# SCHEDULING (Future Enhancement)
# ==============================================================================
# Automatic scheduling configuration (not yet implemented)

# Enable automatic scheduling
SCHEDULING_ENABLED=false

# Shutdown schedule (cron format)
# Example: "0 18 * * 1-5" = 6 PM on weekdays
SHUTDOWN_SCHEDULE=""

# Startup schedule (cron format)
# Example: "0 8 * * 1-5" = 8 AM on weekdays
STARTUP_SCHEDULE=""

# ==============================================================================
# ADVANCED SETTINGS
# ==============================================================================
# Advanced configuration options

# Verify resource state after start operations
VERIFY_AFTER_START=true

# Verification timeout (seconds)
VERIFICATION_TIMEOUT=600

# Verification retry interval (seconds)
VERIFICATION_RETRY_INTERVAL=10

# Enable detailed AWS API call logging
AWS_API_DEBUG=false

# Terraform state file path (for resource discovery)
TERRAFORM_STATE_FILE="terraform/terraform.tfstate"

# Use Terraform state for resource discovery
USE_TERRAFORM_STATE=true

# ==============================================================================
# RESOURCE-SPECIFIC SETTINGS
# ==============================================================================

# Lambda Functions
# Preserve environment variables when stopping
LAMBDA_PRESERVE_ENV_VARS=true

# SageMaker Endpoints
# Delete endpoint configs when stopping (saves minimal cost)
SAGEMAKER_DELETE_CONFIGS=false

# Kinesis Streams
# Data retention period when stopping (hours, 24-168)
KINESIS_RETENTION_PERIOD=24

# DynamoDB Tables
# Enable point-in-time recovery backup before stopping
DYNAMODB_PITR_BACKUP=false

# CloudWatch Logs
# Export logs to S3 before deletion
CLOUDWATCH_EXPORT_LOGS=false
CLOUDWATCH_EXPORT_S3_BUCKET=""

# ==============================================================================
# END OF CONFIGURATION
# ==============================================================================

# Validation function (do not modify)
validate_config() {
    local errors=0
    
    # Validate required settings
    if [[ -z "$PROJECT_NAME" ]]; then
        echo "ERROR: PROJECT_NAME is required"
        ((errors++))
    fi
    
    if [[ -z "$AWS_REGION" ]]; then
        echo "ERROR: AWS_REGION is required"
        ((errors++))
    fi
    
    if [[ -z "$STATE_FILE" ]]; then
        echo "ERROR: STATE_FILE is required"
        ((errors++))
    fi
    
    # Validate environment
    if [[ ! "$ENVIRONMENT" =~ ^(dev|staging|prod|all)$ ]]; then
        echo "ERROR: ENVIRONMENT must be one of: dev, staging, prod, all"
        ((errors++))
    fi
    
    # Validate numeric values
    if [[ ! "$MAX_WORKERS" =~ ^[0-9]+$ ]] || [[ "$MAX_WORKERS" -lt 1 ]]; then
        echo "ERROR: MAX_WORKERS must be a positive integer"
        ((errors++))
    fi
    
    if [[ ! "$KINESIS_MIN_SHARD_COUNT" =~ ^[0-9]+$ ]] || [[ "$KINESIS_MIN_SHARD_COUNT" -lt 1 ]]; then
        echo "ERROR: KINESIS_MIN_SHARD_COUNT must be at least 1"
        ((errors++))
    fi
    
    return $errors
}
