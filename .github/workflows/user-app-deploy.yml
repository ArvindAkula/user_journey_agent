name: Deploy User Application

on:
  push:
    branches: [main, develop]
    paths:
      - 'packages/user-app/**'
      - 'packages/shared/**'
      - '.github/workflows/user-app-deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - 'packages/user-app/**'
      - 'packages/shared/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: user-journey-analytics/user-app

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build shared library
        run: |
          cd packages/shared
          npm run build

      - name: Run user app tests
        run: |
          cd packages/user-app
          npm test -- --coverage --watchAll=false

      - name: Run lint
        run: |
          cd packages/user-app
          npm run lint

      - name: Build user app
        run: |
          cd packages/user-app
          npm run build

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: packages/user-app/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying user app to staging environment"
          # Add your staging deployment commands here
          # Example: kubectl, helm, or cloud provider CLI commands

  deploy-production:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying user app to production environment"
          # Add your production deployment commands here
          # Example: kubectl, helm, or cloud provider CLI commands

  health-check:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
      - name: Health check
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Determine environment
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            HEALTH_URL="https://user-app.yourdomain.com/health"
          else
            HEALTH_URL="https://user-app-staging.yourdomain.com/health"
          fi
          
          # Check health endpoint
          for i in {1..5}; do
            if curl -f "$HEALTH_URL"; then
              echo "Health check passed"
              exit 0
            fi
            echo "Health check attempt $i failed, retrying..."
            sleep 10
          done
          
          echo "Health check failed after 5 attempts"
          exit 1